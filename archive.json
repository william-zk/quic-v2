{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-12-05T00:28:09.638074+00:00",
  "repo": "quicwg/quic-v2",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU4NjUyODQ1Nzc=",
      "title": "Add a provisional version",
      "url": "https://github.com/quicwg/quic-v2/issues/1",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Because VN is still a moving target, and the WG might want to increase the diff from v1, the draft should specify an experimental version number to use until RFC, at which point we can switch over to 0x00000002.",
      "createdAt": "2021-04-22T18:19:48Z",
      "updatedAt": "2021-04-23T21:05:21Z",
      "closedAt": "2021-04-23T21:05:21Z",
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Yes. Something like \"0xFF0100nn\"...",
          "createdAt": "2021-04-23T19:41:14Z",
          "updatedAt": "2021-04-23T19:41:14Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU4NjYzODU0MzU=",
      "title": "Retry protection key",
      "url": "https://github.com/quicwg/quic-v2/issues/2",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft defines a V2 salt. Should it also define a V2 retry protection key?",
      "createdAt": "2021-04-23T19:45:48Z",
      "updatedAt": "2021-04-26T19:28:16Z",
      "closedAt": "2021-04-26T19:28:16Z",
      "comments": []
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWU4NjgwNzI2NDA=",
      "title": "Update Labels",
      "url": "https://github.com/quicwg/quic-v2/issues/3",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We can get complete key separation between quic v1 and v2 by simply changing the labels used as HKDF inputs.",
      "createdAt": "2021-04-26T19:31:43Z",
      "updatedAt": "2021-04-26T19:56:58Z",
      "closedAt": "2021-04-26T19:56:58Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "9.6 of quic-tls says we should, so this is inflight.",
          "createdAt": "2021-04-26T19:46:25Z",
          "updatedAt": "2021-04-26T19:46:25Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU4NjkzMzQxMDI=",
      "title": "Different version number",
      "url": "https://github.com/quicwg/quic-v2/issues/4",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@martinthomson wants to use some other version number, not 2. I'd have to retitle the draft, but other than that I don't have a strong feeling about it.",
      "createdAt": "2021-04-27T23:06:09Z",
      "updatedAt": "2021-04-28T16:04:49Z",
      "closedAt": "2021-04-28T16:04:49Z",
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Upon further reflection, this is a pretty fundamental question: are QUIC versions incremental, where in general version N comes after N-1 and is implied to be \"better\", or are they randomly spread over the space with no clear temporal or quality relationship?",
          "createdAt": "2021-04-28T04:35:31Z",
          "updatedAt": "2021-04-28T04:35:31Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> are QUIC versions incremental, where in general version N comes after N-1 and is implied to be \"better\", or are they randomly spread over the space with no clear temporal or quality relationship?\r\n\r\nI think this is the framing that we should use for reaching a resolution.\r\n\r\nThe reason we chose \"HTTP/3\" as the name for the HTTP binding for QUIC is because people tend to believe that increments on version number represent something better. It'd be hard if not impossible to change that perception.\r\n\r\nComparing to that, this \"v2\" draft is not something meant to be better than v1 - it is merely an alternative wire encoding of v1.\r\n\r\nBased on that, I tend to agree with @martinthomson; it would be less confusing to people if we choose a large random number than \"v2.\"",
          "createdAt": "2021-04-28T04:46:09Z",
          "updatedAt": "2021-04-28T04:46:09Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU4Njk0ODEwNTI=",
      "title": "ALPN",
      "url": "https://github.com/quicwg/quic-v2/issues/5",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "on slack some are saying we should roll a new h3 ALPN for running over quicv2. I cannot quite follow the argument but this is a better venue for the discussion.",
      "createdAt": "2021-04-28T04:26:07Z",
      "updatedAt": "2021-06-02T18:22:48Z",
      "closedAt": "2021-06-02T18:22:48Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "You definitely need a new specification, because a different QUIC version might not be suitable.  You either say:\r\n\r\n* h3 can be used with QUICv2, or\r\n* h3q2 (or whatever new string you like) identifies HTTP/3 when running over QUICv2.\r\n\r\nThere are lots of arguments as to why you might choose to do one or the other.",
          "createdAt": "2021-04-28T04:33:18Z",
          "updatedAt": "2021-04-28T04:33:18Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I'm swayed more toward a new ALP.N at the moment ",
          "createdAt": "2021-04-28T11:34:38Z",
          "updatedAt": "2021-04-28T11:34:38Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "FWIW we painted ourselves into this corner. We punting on the problem and simply tied H3 to v1. Now we are actively trying to solve VN we might be able to pay back the tech debt. For example, a document that updates H3 to say that it can work over versions compatible with v1. Incompatible versions could still need to defined as a new application mapping,",
          "createdAt": "2021-04-28T12:44:35Z",
          "updatedAt": "2021-04-28T12:44:35Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "Whatever we do, I think we need to ensure that servers can give sufficient information to clients via Alt-Svc so that the client can pick a compatible version (if any) and avoid VN. This could, then, be solved via Alt-Svc layer or via ALPN, but I think this is any important property.",
          "createdAt": "2021-04-28T18:39:05Z",
          "updatedAt": "2021-04-28T18:39:05Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "Well \"avoiding VN\" is only important to the extent that we can't do compatible VN.",
          "createdAt": "2021-04-28T18:50:54Z",
          "updatedAt": "2021-04-28T18:50:54Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "I think we want to allow the existence of a server that only supports v2 and servers that only support v1.... and clients that only support v2 and clients that only support v1. Given this, there will be client : server pairs which do not support any mutually compatible options. It seems like it would be desirable for clients to be able to deduce this from Alt-Svc without needing to see the QUIC connection to the server fail?",
          "createdAt": "2021-04-28T19:54:30Z",
          "updatedAt": "2021-04-28T19:54:30Z"
        },
        {
          "author": "RyanTheOptimist",
          "authorAssociation": "NONE",
          "body": "Oh, and this text from the HTTP/3 docs is probably relevant:\r\n\r\n>    HTTP/3 relies on QUIC version 1 as the underlying transport.  The use\r\n>    of other QUIC transport versions with HTTP/3 MAY be defined by future\r\n>    specifications.\r\n",
          "createdAt": "2021-04-28T21:17:16Z",
          "updatedAt": "2021-04-28T21:17:16Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWU4NzExODMzOTg=",
      "title": "Grease the packet type?",
      "url": "https://github.com/quicwg/quic-v2/issues/7",
      "state": "OPEN",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would be a simple matter to switch around the packet type codes in long headers, e.g.\r\n\r\n0x0 = Retry\r\n0x1 = Handshake\r\n0x2 = 0-RTT\r\n0x3 = Initial\r\n\r\nso no one ossifies on 0x0 = Initial.",
      "createdAt": "2021-04-29T15:58:09Z",
      "updatedAt": "2021-04-29T15:58:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 9,
      "id": "I_kwDOFX7TQc4-mBKB",
      "title": "Don't Change Labels",
      "url": "https://github.com/quicwg/quic-v2/issues/9",
      "state": "OPEN",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "> The labels used in {{RFC9001}} to derive packet protection keys (Sec 5.1), header protection keys (Sec 5.4), Retry Integrity Tag keys (Sec 5.8), and key updates (Sec 6.1) change from \"quic key\" to \"quicv2 key\", from \"quic iv\" to \"quicv2 iv\", from \"quic hp\" to \"quicv2 hp\", and from \"quic ku\" to \"quicv2 ku,\" to meet the guidance for new versions in Section 9.6 of that document.\r\n\r\nDo we really need to change the labels? This will be a much bigger pain for me to integrate beyond the normal salt and retry secret changes that we regularly did for draft versions. What added benefit are the label changes giving?",
      "createdAt": "2021-11-10T18:15:31Z",
      "updatedAt": "2021-11-10T18:24:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "body": "https://www.rfc-editor.org/rfc/rfc9001.html#key-diversity\r\n\r\nit's a SHOULD",
          "createdAt": "2021-11-10T18:22:14Z",
          "updatedAt": "2021-11-10T18:22:14Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Ok. It's probably worth some more discussion. Personally, I'd rather follow the model we set with draft versions. At least, that's what MsQuic is setup to easily handle.",
          "createdAt": "2021-11-10T18:24:39Z",
          "updatedAt": "2021-11-10T18:24:39Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOFX7TQc4-ukxt",
      "title": "Applicability of extensions",
      "url": "https://github.com/quicwg/quic-v2/issues/10",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft should state explicitly that all v1 extensions can be applied to v2 connections.",
      "createdAt": "2021-11-12T20:46:59Z",
      "updatedAt": "2021-11-22T23:06:26Z",
      "closedAt": "2021-11-22T23:06:26Z",
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDOFX7TQc4_jV8O",
      "title": "Clarify about cross version 0-RTT via Compatible Version Negotiation",
      "url": "https://github.com/quicwg/quic-v2/issues/14",
      "state": "OPEN",
      "author": "flano-yuki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Thank you for this work.\r\n\r\nCan quic v2 server accept a v1 0-RTT packet via Compatible Version Negotiation?\r\n\r\nIf I understand correctly, The [version negotiation specification](https://quicwg.org/version-negotiation/draft-ietf-quic-version-negotiation.html#name-interaction-with-0-rtt) says that \"future versions will determine how to handle it.\" Even if the server accepts v1 packets as is, I would think the handling needs to be described in v2.",
      "createdAt": "2021-11-29T16:17:06Z",
      "updatedAt": "2021-12-02T00:59:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kazu-yamamoto",
          "authorAssociation": "NONE",
          "body": "Developers are actually puzzled.\r\nSee https://github.com/quicwg/version-negotiation/issues/68",
          "createdAt": "2021-12-02T00:59:05Z",
          "updatedAt": "2021-12-02T00:59:05Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOFX7TQc4_2rCC",
      "title": "Need to specify the update process",
      "url": "https://github.com/quicwg/quic-v2/issues/15",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We now have some implementation experience, and got interop between 2 implementations. That's great, but the process was difficult because the transition is somehow under specified. There was a lot of discussion as issues with the compatible version negotiation draft:\r\n\r\n* [Specify impact on 0-RTT, session resume tickets, etc.](https://github.com/quicwg/version-negotiation/issues/68)\r\n* [Security issue when upgrading based on received version in header](https://github.com/quicwg/version-negotiation/issues/70)\r\n* [Validation on incompatible negotiation](https://github.com/quicwg/version-negotiation/issues/73)\r\n\r\nThese issues cannot be fully addressed in the compatible version negotiation draft, which has to be version independent. Instead, they need to be addressed in specific drafts. The V2 draft, for example, should specify exactly what happens during the version negotiation. My understanding is that when version negotiation succeeds, we will see something like:\r\n\r\n- Client sends a first flight composed of Version 1 initial packets\r\n- Server may send Version 1 initial packets containing acknowledgement, e.g., to manage losses of Initial packets\r\n- At some point, the server will have received and parsed the transport parameters, and decided to upgrade to V2\r\n- After that point, server will send version 2 packets (Initial, Handshake, 1RTT)\r\n- Client will receive version 2 packets and should be ready to process them before the negotiation completes\r\n- The transport parameters will arrive in V2 handshake packets, after which the negotiation is done.\r\n\r\nThere are quite a few potential issues that need resolution:\r\n\r\n1) As explained above, in case of successful negotiation, the client expects the server to start sending V2 packets asap. Shall it ignore V1 packets as soon as it received V2 packets? Should in check version numbers in Initial packets, in a process similar to key updates?\r\n2) If the client receives transport parameters on a version 2 packet, what shall it do if the chosen version is V1?\r\n3) And vice versa?\r\n4) If the server receives V2 handshake packets from the client, shall it conclude that the negotiation is successful?\r\n5) In case of session resumption, does the client resume using V1 or V2? I think the answer to that question depends on the content of the \"supported versions\" list provided by the server. If it includes V2, then the server is ready to receive V2 packets. If the server is part of a server farm with partial deployment of V2, it should not say that V2 is ready. The answer may also depend on local conditions at the client.\r\n6) If the client resumes using V1, it will send 0-RTT packets using V1. The server will receive these packets after the client's initial packets, and thus after receiving the transport parameters and completing the version upgrade. Should the server drop these packets? Or should it continue accept them until the handshake completes?\r\n7) On the client side, there will be a delay between completing the negotiation and finalizing the handshake. The client may want to send 0-RTT packets during that interval. Shall it send those using V1 or V2?\r\n\r\n\r\n",
      "createdAt": "2021-12-04T21:14:50Z",
      "updatedAt": "2021-12-04T21:14:50Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 6,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI1MzcxNjkz",
      "title": "alpn text",
      "url": "https://github.com/quicwg/quic-v2/pull/6",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "One way to fix #5 ",
      "createdAt": "2021-04-28T16:18:08Z",
      "updatedAt": "2021-06-02T18:22:48Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "eb1b70ee4e069483599e798a9432bc1fc7c7a120",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "alpn",
      "headRefOid": "9e74378765f92e4dd7d1da6897cf6241ec7cd8b5",
      "closedAt": "2021-06-02T18:22:48Z",
      "mergedAt": "2021-06-02T18:22:48Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "0abe99f92456b09314e786b6e271bcec66ce76d5"
      },
      "comments": [
        {
          "author": "MikeBishop",
          "authorAssociation": "NONE",
          "body": "I have a feeling you'll need to say that this \"updates\" HTTP/3.",
          "createdAt": "2021-04-28T20:55:36Z",
          "updatedAt": "2021-04-28T20:55:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0NjYwMjkxMzE5",
      "title": "sync with main",
      "url": "https://github.com/quicwg/quic-v2/pull/8",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-02T18:21:50Z",
      "updatedAt": "2021-06-02T18:23:33Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "alpn",
      "baseRefOid": "9e74378765f92e4dd7d1da6897cf6241ec7cd8b5",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "main",
      "headRefOid": "0abe99f92456b09314e786b6e271bcec66ce76d5",
      "closedAt": "2021-06-02T18:23:33Z",
      "mergedAt": "2021-06-02T18:23:33Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "68020698e4d9fe9db02478ff6751fb474b3a5534"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOFX7TQc4u4M6d",
      "title": "convert filename to -ietf",
      "url": "https://github.com/quicwg/quic-v2/pull/11",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-22T22:53:42Z",
      "updatedAt": "2021-11-22T22:54:37Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "79f0607cbbf8331a6ee6d2705fa00ca39909d49d",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "update-name",
      "headRefOid": "030e4774e787009a9ad6cfd9c6fec7981bbb11ca",
      "closedAt": "2021-11-22T22:54:37Z",
      "mergedAt": "2021-11-22T22:54:37Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "88132694f806e3a1ed76e5d3a4cef05eb565b42c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "PR_kwDOFX7TQc4u4OZW",
      "title": "Fix #10: support all extensions",
      "url": "https://github.com/quicwg/quic-v2/pull/12",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-22T23:05:40Z",
      "updatedAt": "2021-11-22T23:06:25Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "a834768d2dddaab2b77478e3bb4b9b68be4c0fd4",
      "headRepository": "quicwg/quic-v2",
      "headRefName": "extensions",
      "headRefOid": "420ffc320bf70441b6f18de0af2cec3ef0ccdffe",
      "closedAt": "2021-11-22T23:06:25Z",
      "mergedAt": "2021-11-22T23:06:25Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "287bdcf88a2ff8fdb257ef6d8e60b59d62ad0421"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOFX7TQc4u7Fp3",
      "title": "Fix typo in Key Updates label",
      "url": "https://github.com/quicwg/quic-v2/pull/13",
      "state": "MERGED",
      "author": "IvanNardi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-23T18:35:53Z",
      "updatedAt": "2021-11-23T18:51:15Z",
      "baseRepository": "quicwg/quic-v2",
      "baseRefName": "main",
      "baseRefOid": "9d29f07d8743238c363c278c68f72715c5efec5b",
      "headRepository": "IvanNardi/quic-v2",
      "headRefName": "key-update",
      "headRefOid": "64ac9f36cae4ec2057485ef65b81a65f8b2df1dd",
      "closedAt": "2021-11-23T18:43:15Z",
      "mergedAt": "2021-11-23T18:43:14Z",
      "mergedBy": "martinduke",
      "mergeCommit": {
        "oid": "4557dc73f1b3caa8f7b81077791babd6d6f5f153"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOFX7TQc4whW_k",
          "commit": {
            "abbreviatedOid": "64ac9f3"
          },
          "author": "martinduke",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-23T18:41:37Z",
          "updatedAt": "2021-11-23T18:41:37Z",
          "comments": []
        }
      ]
    }
  ]
}